#!/bin/sh
set -e

# Post-installation script for tty-egpf-monitord
# CRITICAL: Ubuntu 22.04 needs libbpf 1.6.2+ for BPF tracepoint attachment to work

case "$1" in
    configure)
        echo "Configuring tty-egpf-monitord..."
        
        # Check Ubuntu version and upgrade libbpf if needed
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            if [ "$ID" = "ubuntu" ] && ([ "$VERSION_ID" = "22.04" ] || [ "$VERSION_ID" = "24.04" ]); then
                echo "Ubuntu $VERSION_ID detected - scheduling libbpf upgrade for BPF compatibility..."
                
                # Check current libbpf version
                CURRENT_LIBBPF=$(dpkg -l | grep -E "libbpf[0-9]*" | awk '{print $3}' | cut -d: -f2 | cut -d- -f1 | head -1)
                echo "Current system libbpf version: $CURRENT_LIBBPF"
                
                # Check if libbpf upgrade is needed (for 22.04 with 0.5.0, or 24.04 with incompatible versions)
                NEEDS_UPGRADE=false
                if [ "$VERSION_ID" = "22.04" ] && [ "$CURRENT_LIBBPF" = "0.5.0" ]; then
                    echo "Ubuntu 22.04 with libbpf 0.5.0 - needs upgrade for BPF tracepoint compatibility"
                    NEEDS_UPGRADE=true
                elif [ "$VERSION_ID" = "24.04" ]; then
                    echo "Ubuntu 24.04 - checking if libbpf upgrade needed for compatibility"
                    # For 24.04, always ensure we have our tested version to avoid compatibility issues
                    if [ ! -f /usr/local/lib64/libbpf.so.1.6.2 ] && [ ! -f /usr/local/lib/libbpf.so.1.6.2 ]; then
                        echo "libbpf 1.6.2 not found in /usr/local - scheduling upgrade for compatibility"
                        NEEDS_UPGRADE=true
                    else
                        echo "libbpf 1.6.2 already installed in /usr/local - no upgrade needed"
                    fi
                fi
                
                if [ "$NEEDS_UPGRADE" = "true" ]; then
                    echo "Scheduling libbpf 1.6.2 upgrade for BPF compatibility..."
                    
                    # Create a background upgrade script to avoid package manager conflicts
                    cat > /tmp/upgrade_libbpf.sh << 'EOF'
#!/bin/bash
set -e
echo "Starting libbpf upgrade in background..."
sleep 5  # Wait for package manager to finish

# Check if we can access package manager
while ! apt-get update >/dev/null 2>&1; do
    echo "Waiting for package manager to be available..."
    sleep 10
done

echo "Package manager available, starting libbpf upgrade..."

# Install build dependencies
echo "Installing build dependencies..."
apt-get install -y build-essential git pkg-config libelf-dev zlib1g-dev

# Build and install libbpf 1.6.2
echo "Building libbpf 1.6.2 from source..."
cd /tmp
if [ -d libbpf ]; then
    rm -rf libbpf
fi
git clone --depth 1 --branch v1.6.2 https://github.com/libbpf/libbpf.git
cd libbpf/src
make -j$(nproc)

# Remove existing libbpf installations to avoid conflicts
echo "Removing existing libbpf installations..."
# DON'T remove system packages - install alongside instead
echo "Installing libbpf 1.6.2 alongside existing system packages..."

# Install new libbpf
echo "Installing libbpf 1.6.2..."
make install PREFIX=/usr/local
ldconfig

# Configure library search paths automatically
echo "Configuring library search paths..."
echo "/usr/local/lib64" | tee /etc/ld.so.conf.d/local.conf
ldconfig

# Verify installation
if [ -f /usr/local/lib64/libbpf.so.1 ]; then
    echo "✅ libbpf 1.6.2 installed successfully at /usr/local/lib64/"
    echo "✅ Library paths configured automatically"
    echo "✅ BPF tracepoint attachment should now work properly"
    
    # Restart the daemon to pick up new libbpf
    if command -v systemctl >/dev/null 2>&1; then
        echo "Restarting tty-egpf-monitord to use new libbpf..."
        systemctl restart tty-egpf-monitord
    fi
else
    echo "❌ libbpf installation failed - BPF programs may not work"
fi

# Clean up build files
cd /
rm -rf /tmp/libbpf
echo "libbpf upgrade completed"
EOF

                    # Make it executable and run in background
                    chmod +x /tmp/upgrade_libbpf.sh
                    nohup /tmp/upgrade_libbpf.sh > /tmp/libbpf_upgrade.log 2>&1 &
                    echo "libbpf upgrade scheduled in background (PID: $!)"
                    echo "Check progress with: tail -f /tmp/libbpf_upgrade.log"
                    
                else
                    echo "libbpf upgrade not needed - system already compatible"
                fi
            else
                echo "Non-Ubuntu 22.04/24.04 system detected - libbpf upgrade skipped"
            fi
        else
            echo "Could not determine OS version - libbpf upgrade skipped"
        fi
        
        # Create systemd service user if it doesn't exist
        if ! getent passwd tty-egpf-monitor >/dev/null 2>&1; then
            echo "Creating tty-egpf-monitor user..."
            adduser --system --group --no-create-home --shell /bin/false tty-egpf-monitor
        fi
        
        # Enable and start the service
        if command -v systemctl >/dev/null 2>&1; then
            echo "Enabling tty-egpf-monitord service..."
            systemctl daemon-reload
            systemctl enable tty-egpf-monitord.service
            echo "Starting tty-egpf-monitord service..."
            systemctl start tty-egpf-monitord.service || echo "Warning: Failed to start service (may need manual configuration)"
        fi
        
        echo "tty-egpf-monitord configuration completed"
        ;;
        
    abort-upgrade|abort-remove|abort-deconfigure)
        ;;
        
    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;
esac

exit 0
