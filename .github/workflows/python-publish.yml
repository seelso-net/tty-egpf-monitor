name: Publish Python Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd python-client
        python -m pip install --upgrade pip
        pip install build pytest flake8 mypy
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        cd python-client
        flake8 tty_egpf_monitor --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 tty_egpf_monitor --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type check with mypy
      run: |
        cd python-client
        mypy tty_egpf_monitor --ignore-missing-imports
    
    - name: Test import
      run: |
        cd python-client
        python -c "import tty_egpf_monitor; print(f'Version: {tty_egpf_monitor.__version__}')"

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Update version from git tag
      run: |
        cd python-client
        if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Updating version to $VERSION"
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" tty_egpf_monitor/__init__.py
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        fi
    
    - name: Build package
      run: |
        cd python-client
        python -m build
    
    - name: Check package
      run: |
        cd python-client
        python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ github.ref_name }}
        path: python-client/dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && vars.ENABLE_PYPI_PUBLISHING == 'true'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ github.ref_name }}
        path: dist/
    
    - name: Publish to TestPyPI (if token available)
      uses: pypa/gh-action-pypi-publish@release/v1
      continue-on-error: true
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        packages-dir: dist/
        skip-existing: true

  publish-pypi:
    needs: [build, publish-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && vars.ENABLE_PYPI_PUBLISHING == 'true'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ github.ref_name }}
        path: dist/
    
    - name: Publish to PyPI (if token available)
      uses: pypa/gh-action-pypi-publish@release/v1
      continue-on-error: true
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
        skip-existing: true
        
    - name: PyPI publishing info
      run: |
        echo "PyPI publishing attempted"
        echo "If publishing failed, ensure API tokens are configured:"
        echo "1. Create API token at https://pypi.org/manage/account/token/"
        echo "2. Add token as PYPI_API_TOKEN secret in repository settings"
        echo "3. Set ENABLE_PYPI_PUBLISHING variable to 'true' in repository settings"
