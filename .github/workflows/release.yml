name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache apt packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang \
          make \
          libelf-dev \
          zlib1g-dev \
          pkg-config \
          build-essential \
          linux-headers-generic \
          libbpf-dev \
          apt-utils \
          dpkg-dev \
          debhelper \
          devscripts \
          dh-make

    - name: Ensure bpftool
      run: |
        set -e
        if ! command -v bpftool >/dev/null 2>&1; then
          sudo apt-get install -y linux-tools-common linux-tools-generic
          BPFDIR=$(ls -d /usr/lib/linux-tools-* 2>/dev/null | head -n1 || true)
          if [ -n "$BPFDIR" ] && [ -x "$BPFDIR/bpftool" ]; then
            sudo ln -sf "$BPFDIR/bpftool" /usr/local/bin/bpftool
          fi
        fi
        bpftool version || true

    - name: Build application
      run: |
        make clean
        make

    - name: Update changelog with version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        sed -i "s/1.0.0-1/$VERSION-1/" debian/changelog
        sed -i "s/$(date -R)/$(date -R)/" debian/changelog

    - name: Clean Debian outputs
      run: |
        sudo rm -f ../*.deb ../*.buildinfo ../*.changes || true
        sudo rm -rf debian/tty-egpf-monitor debian/tty-egpf-monitord debian/tty-egpf-monitor-cli || true

    - name: Build Debian package
      run: |
        dpkg-buildpackage -b -us -uc
        ls -la ../*.deb

    - name: Copy Debian packages to workspace
      run: |
        cp ../*.deb .

    - name: Upload Debian package artifact
      uses: actions/upload-artifact@v4
      with:
        name: debs
        path: '*.deb'
        retention-days: 30

    - name: Publish apt repo to gh-pages
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        REPO: ${{ github.repository }}
      run: |
        set -e
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@users.noreply.github.com"
        rm -rf /tmp/apt-repo
        git clone --depth 1 --branch gh-pages "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" /tmp/apt-repo || {
          mkdir -p /tmp/apt-repo
          cd /tmp/apt-repo
          git init
          git checkout -b gh-pages
          git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git"
          cd -
        }
        mkdir -p /tmp/apt-repo/pool/main
        mkdir -p /tmp/apt-repo/dists/stable/main/binary-amd64
        cp ./*.deb /tmp/apt-repo/pool/main/
        cd /tmp/apt-repo
        apt-ftparchive packages pool/main > dists/stable/main/binary-amd64/Packages
        gzip -c dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz
        apt-ftparchive \
          -o APT::FTPArchive::Release::Label="tty-egpf-monitor" \
          -o APT::FTPArchive::Release::Suite="stable" \
          -o APT::FTPArchive::Release::Codename="stable" \
          -o APT::FTPArchive::Release::Architectures="amd64" \
          -o APT::FTPArchive::Release::Components="main" \
          release dists/stable > dists/stable/Release
        touch .nojekyll
        # Publish public key at root for clients
        if [ -f "$GITHUB_WORKSPACE/public-apt-key.asc" ]; then
          cp "$GITHUB_WORKSPACE/public-apt-key.asc" ./public-apt-key.asc
        elif [ -n "$GPG_PRIVATE_KEY" ]; then
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          gpg --armor --export > ./public-apt-key.asc || true
        fi
        if [ -n "$GPG_PRIVATE_KEY" ]; then
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" -abs -o dists/stable/Release.gpg dists/stable/Release
          gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --clearsign -o dists/stable/InRelease dists/stable/Release || true
        fi
        git add -A
        git commit -m "Update apt repo for ${GITHUB_REF}" || git commit -m "Initialize apt repo"
        git push -u origin gh-pages
        cd -
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: '*.deb'
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
